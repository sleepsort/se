#!/usr/bin/env vim
支持DAAT打分，并添加了VSM, Okapi BM25, Language Model几个模型。
觉得 VSM 与 LM+JM smoothing 更偏好短文档，
而 BM25 与 LM+Dirichlet smoothing 会偏好长文档，
如以下几个top5的结果，文件名后为文档长度。

Query = excalibur
Numhit = 31

VSM:
[425114] 0.782063 data/reuter/disk1/5541newsML.xml (52)
[294655] 0.635426 data/reuter/disk1/367402newsML.xml (64)
[589673] 0.622458 data/reuter/disk2/593725newsML.xml (98)
[469248] 0.519894 data/reuter/disk1/95781newsML.xml (176)
[  1915] 0.414972 data/reuter/disk1/101742newsML.xml (98)

BM25:
[469248] 23.267507 data/reuter/disk1/95781newsML.xml (176)
[589673] 23.116323 data/reuter/disk2/593725newsML.xml (98)
[425114] 22.757158 data/reuter/disk1/5541newsML.xml (52)
[294655] 22.489875 data/reuter/disk1/367402newsML.xml (64)
[  1915] 21.765569 data/reuter/disk1/101742newsML.xml (98)

LM+JM:
[425114] 0.038503 data/reuter/disk1/5541newsML.xml (52)
[294655] 0.031292 data/reuter/disk1/367402newsML.xml (64)
[589673] 0.030654 data/reuter/disk2/593725newsML.xml (98)
[469248] 0.025610 data/reuter/disk1/95781newsML.xml (176)
[  1915] 0.020450 data/reuter/disk1/101742newsML.xml (98)

LM+Diri:
[469248] 0.007724 data/reuter/disk1/95781newsML.xml (176)
[589673] 0.005540 data/reuter/disk2/593725newsML.xml (98)
[561251] 0.004222 data/reuter/disk2/565297newsML.xml (204)
[425114] 0.003881 data/reuter/disk1/5541newsML.xml (52)
[294655] 0.003837 data/reuter/disk1/367402newsML.xml (64)

================================
RCV1数据信息:
文档个数:           806791
词项个数:           438488
stem后词项个数:     371521
平均文档长度:       261.19  (#ttf=210728333)
平均词项长度:       8.42    (#permuterm=3691287)

索引信息:
词典大小:           7.1MB
倒排表大小(带距离): 2.4GB
压缩后大小(带距离): 889MB
permutree大小:      219MB


* 倒排表结构: 三级倒排

词项id  =>  <词项id,文件指针>  =>  <文档id,文件指针>  => 距离信息
            pst.dat.trm            pst.dat.doc           pst.dat.pos
 原始大小:  6MB                    1.2GB                 1.2GB
 压缩大小:  6MB                    225MB                 669MB
 
每次检索一个词项的索引信息时，先从内存缓存中找，若未命中，按需求跳两级或三级
从磁盘中取得倒排链。

压缩用Variable Byte + D-gap操作。压缩的数列包括: 文档id、文件指针、词项位置。

* permuterm tree : B+树

非叶结点存储部分key值，用于多分查找；
叶结点存储包括非叶结点出现的所有key值。
同一层上的相邻叶结点之间用一个单向链串起来，方便区间搜。
此处，key的结构为 <轮转字符串, 词项id>。
这样，查找wildcard时，通过B+树上的ranged query功能收集到所有命中的
key，将词项id取出来，并把query语法树上的wildcard query结构转变成or query
的结构。如:
      AND                  AND
     /   \       =>       /   \
tropi*al fish            OR   fish
                        /  \
                tropival  tropical

* 词典 : Hashmap

term_id => <term_string, document_frequency, corpus_frequency>
doc_id  => <doc_filename, doc_length>


================================
项目结构

assign-x-yyy
│
├── data -> ../data   # 数据文件, 放在项目的上层目录
├── lib               # 静态库文件
├── script            # 处理脚本或测试脚本
├── src               # 源文件
│   ├── main
│   ├── index
│   ├── query
│   ├── search
│   ├── template
│   └── util
└── test              # 测试信息

-------

data
│
├── index             # 程序建立的索引文件
├── reuter-zip        # RCV1的初解压文件，为zip格式，可用script中的脚本处理
│   ├── disk1
│   └── disk2
├── reuter            # RCV1的解压文件，均为xml格式
└── shakespeare       # 前期作业的数据文件

================================
测试/开发环境:

系统环境(包括项目编译环境与引用静态库的制作环境): 
  ArchLinux (i686) g++ 4.7.2 glibc 2.17
  Ubuntu  (x86_64) g++ 4.4.3 glibc 2.11.1

用到的外部代码:
  lib/lib*porter.a:   Jamie Callan 的 Porter Stemmer，已打包
  lib/lib*pugixml.a:  Arseny Kapoulkine 的 pugixml库，已打包

makefile自带64位与32位检测，若出问题，
可更改src/Makefile中的$(LIB)进行调整

================================
运行方式:
make clean        # 清除运行文件
make              # 编译
make idx-small    # 根据shakespeare数据集重建索引
make idx-medium   # 根据reuter数据集重建索引(会抹掉原有索引)

make sch < test/boolean   # 布尔查询
make sch < test/proximity # 词接近查询 
make sch < test/suggest   # 拼写校正
make sch < test/stress    # 内存压力测试

make rnk < test/ranking   # 文档打分测试


